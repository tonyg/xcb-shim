; This is a [Preserves Schema](https://preserves.dev/preserves-schema.html).

version 1 .

; A Protocol specification is a collection of `modules` and shared `simple_types`.
;
ProtocolSpec = {
  "modules": @modules [Module ...],
  "simple_types": @simpleTypes [Type ...],
}.

; A Module describes the location of the input XML file from xcbproto, and contains a sequence
; of `items`, each a Definition.
;
Module = {
  "xmlfilename": @xmlFilename string,
  "items": @items [Definition ...],
}.

; Each Definition is a pair of a Name and a Type.
;
Definition = {
  "definition": @name Name,
  "type": @type Type,
}.

; A Name is a sequence of simple labels. For example, you might see Names like
;
;  - `["xcb", "PIXMAP"]`
;  - `["xcb", "Glx", "PIXMAP"]`
;  - `["xcb", "Input", "InputInfo"]`
;
; and so on. Two-element names come from the `xproto` module; Three-element names, from other
; modules. These names are computed by `xcbgen`.
;
Name = [string ...].

; A Type is one of a large number of possible variants.
;
Type = @base BaseFields & @detail SubType .

SubType =
/ @simple SimpleType
/ @expr { "class": "expr", "expr": @expr Expr }
/ @list { "class": "list", "member": @memberType TypeRef, "expr": @expr Expr }
/ @pad { "class": "pad" }
/ @complex ComplexType
.

SimpleType =
/ @plain { "class": "simple" }
/ @enum { "class": "enum", "values": @values [EnumEntry ...], "bits": @bits [EnumEntry ...] }
/ @fd { "class": "fd" }
.

ComplexType = @fields FieldsField & @lengthExpr LengthExprField & @detail SubComplexType .

SubComplexType =
/ @bitcase { "class": "bitcase", "matches": @matches [Expr ...]}
/ @case { "class": "case", "matches": @matches [Expr ...] }
/ @error ErrorType
/ @event EventType
/ @eventstruct { "class": "eventstruct" }
/ @reply { "class": "reply" }
/ @request RequestType
/ @struct { "class": "struct" }
/ @switch { "class": "switch", "switch_type": @switchType SwitchType, "switch_expr": @switchExpr Expr, "cases": @cases [Field ...] }
/ @union { "class": "union" }
.

ErrorType = { "class": "error" } & @opcodes OpcodesField .
EventType = { "class": "event" } & @opcodes OpcodesField .
RequestType = { "class": "request" } & @opcode OpcodeField & @reply ReplyField .

FieldsField = { "fields": @fields [Field ...] } .
LengthExprField = @present { "length_expr": @value Expr } / @invalid { "length_expr": @invalid any } / @absent {} .
OpcodeField = { "opcode": @opcode int } .
OpcodesField = { "opcodes": @entries [OpcodeEntry ...] } .
ReplyField = @present { "reply": @value Type } / @invalid { "reply": @invalid any } / @absent {} .

SwitchType = "multiple" / "single" .

EnumEntry = [@name string @value int] .
OpcodeEntry = [@name Name @value int] .

Field = {
  "flags": @flags [FieldFlag ...],
  "type": @type TypeRef,
} & @name FieldNameField & @enum EnumField .
FieldNameField = @present { "name": @value string } / @invalid { "name": @invalid any } / @absent {} .
EnumField = @present { "enum": @value string } / @invalid { "enum": @invalid any } / @absent {} .

FieldFlag = "visible" / "wire" / "auto" / "isfd" .

Expr =
/ @enumref ["enumref" @type TypeRef @name string]
/ @binop [@op string @lhs Expr @rhs Expr]
/ @unop [@op string @arg Expr]
/ @nilop [@op string]
/ @id string
/ @const int
/ @bitfield { "bitfield": @expr Expr }
.

TypeRef = @typeRef Name / @type Type .

BaseFields =
& @name NameField
& @size SizeField
& @doc DocField
& @alignOffset AlignOffsetField
& @fixedTotalSize FixedTotalSizeField
& @nmemb NmembField
.

NameField = @present { "name": @value Name } / @invalid { "name": @invalid any } / @absent {} .
SizeField = @present { "size": @value int } / @invalid { "size": @invalid any } / @absent {} .
DocField = @present { "doc": @value Doc } / @invalid { "doc": @invalid any } / @absent {} .
AlignOffsetField = @present { "align_offset": @value int } / @invalid { "align_offset": @invalid any } / @absent {} .
FixedTotalSizeField = @present { "fixed_total_size": @value int } / @invalid { "fixed_total_size": @invalid any } / @absent {} .
NmembField = @present { "nmemb": @value int } / @invalid { "nmemb": @invalid any } / @absent {} .

Doc =
& { "name": @name Name, "brief": @brief string }
& @description DocDescription
& @fields DocFields
& @errors DocErrors
& @see DocSee
& @example DocExample
.

DocDescription = @present { "description": @value string } / @invalid { "description": @invalid any } / @absent {} .
DocFields = @present { "fields": @value { string: string ...:...} } / @invalid { "fields": @invalid any } / @absent {} .
DocErrors = @present { "errors": @value { string: string ...:...} } / @invalid { "errors": @invalid any } / @absent {} .
DocSee = @present { "see": @value { string: string ...:...} } / @invalid { "see": @invalid any } / @absent {} .
DocExample = @present { "example": @value string } / @invalid { "example": @invalid any } / @absent {} .
